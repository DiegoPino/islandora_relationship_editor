<?php

/**
 * @file
 *
 */

// Namespace for adding relationships 
define('MYNS_URI', 'http://www.cec.org/ontologies/relationships#');

/** 
 * Implements hook_menu().
 */
function islandora_relationship_editor_menu() {
  $items['islandora/object/%/manage/relationships'] = array(
    'title' => 'Relationships',
    'description' => 'Add, remove, or validate related objects',
    'file' => 'Main.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_relationship_editor_display_relationships', 2),
    'access arguments' => array(FEDORA_METADATA_EDIT),
    'type' => MENU_LOCAL_TASK,
  );
  $items['islandora/object/%/manage/relationships/add'] = array(
    'title' => t('Add relationships'),
    'description' => t('Add a new related object'),
    'file' => 'Add.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_relationship_editor_add_relationships', 2),
    'access arguments' => array(FEDORA_METADATA_EDIT),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['islandora/object/%/manage/relationships/delete/%/%/%'] = array(
    'title' => t('Delete relationship'),
    'description' => t('Delete a relationship'),
    'file' => 'Delete.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_relationship_editor_delete_relationships', 2, 6, 7, 8),
    'access arguments' => array(FEDORA_METADATA_EDIT),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/** 
 * Implements hook_theme().
 */
function islandora_relationship_editor_theme() {
  return array(
    'relationship_editor_table' => array(
      'variables' => array('relationships' => NULL),
      'template' => 'relationship-editor-table',
      'path' => drupal_get_path('module', 'islandora_relationship_editor') . '/theme',
    ),
/*    'islandora_relationship_editor_related_objects' => array(
      'variables' => array('islandora_object' => NULL),
      'template' => 'theme/related-objects',
      'file' => 'theme/related_objects.theme.inc',
    ),
    */
    'islandora_relationship_editor_block' => array(
        'variables' => array('islandora_object' => NULL),
	'template' => 'theme/related-objects-block',
      	'file' => 'theme/related-objects-block.theme.inc',
    ),

  );
}

/** 
 * Gets delete menu path for a relationship
 */
function islandora_relationship_editor_get_delete_path($objectPid, $namespace, $relationship, $targetPid) {
  $namespace = $namespace ? $namespace : 'NULL';
  $relationship = $relationship ? $relationship : 'NULL';
  $targetPid = $targetPid ? $targetPid : 'NULL';

  return 'islandora/object/' . $objectPid . '/manage/relationships/delete/' . $namespace . '/' . $relationship . '/' . $targetPid;
}

/** 
 * Returns the list of relationships that can be added to this object.
 *
 * @param string $object_pid
 *    the Fedora pid of the object to which the relationship will apply
 */
function get_possible_relationships($object_pid){
  return array(
    'isDraftOf' => t('is draft of'),
    'hasDraft' => t('has draft'),
    'isSummaryOf' => t('is summary of'),
    'hasSummary' => t('has summary'),
    'isUpdateOf' => t('is updated edition of'),
    'hasUpdate' => t('has updated edition'),
    'isResponseTo' => t('is response to'),
    'hasResponse' => t('has response'),
  );
}


/** 
 * Implements hook_islandora_view_object().
 
function islandora_relationship_editor_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('islandora_relationship_editor_related_objects', array('islandora_object' => $object));
  return array('Related objects' => $output);
}
*/

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function islandora_relationship_editor_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.

  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.

  // Many options are defined in hook_block_info():
//$blocks['example_configurable_text'] = array(
$blocks['rel_objects'] = array(
    // info: The name of the block.
  'info' => t('Related objects'),
    // Block caching options (per role, per user, etc.)
//  'cache' => DRUPAL_CACHE_PER_ROLE, // default
);

  // This sample shows how to provide default settings. In this case we'll
  // enable the block in the first sidebar and make it visible only on
  // 'node/*' pages. See the hook_block_info() documentation for these.
//$blocks['related_objects'] = array(
//    'info' => t('Related objects1'),
//  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function islandora_relationship_editor_block_configure($delta = '') {
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.
  $form = array();
  if ($delta == 'rel_objects') {
    // All we need to provide is the specific configuration options for our
    // block. Drupal will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    $form['islandora_relationship_editor_ontology_pid'] = array(
      '#type' => 'textfield',
      '#title' => t('Object PID'),
      '#size' => 60,
      '#description' => t('The PID of object which contains ontology datastream.'),
      '#default_value' => variable_get('islandora_relationship_editor_ontology_pid',  t('islandora:ontology')),
    );
    $form['islandora_relationship_editor_ontology_dsid'] = array(
      '#type' => 'textfield',
      '#title' => t('Datastream DSID'),
      '#size' => 60,
      '#description' => t('The DSID of datastream which contains ontology xml.'),
      '#default_value' => variable_get('islandora_relationship_editor_ontology_dsid',  t('ONTOLOGY')),
    $form['islandora_relationship_editor_ontology_view'] = array(
      '#type' => 'textarea',
      '#disabled' => 'TRUE',
      '#title' => t('Current ontology'),
//      '#description' => t('The relations provided by ontology.'),
//      '#default_value' => get_current_ontology('islandora:ontology', 'ONTOLOGY'),
      '#default_value' => get_current_ontology(variable_get('islandora_relationship_editor_ontology_pid',  t('islandora:ontology')), variable_get('islandora_relationship_editor_ontology_dsid',  t('ONTOLOGY'))),

    );
  }
  return $form;
}
function get_ontology_file($ontologyurl){

  $ch = curl_init($ontologyurl);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER,true);
  $content = curl_exec($ch);
  curl_close($ch);

  return ($content);

}

function get_current_ontology($pid,$dsid){

  $fedora_object = islandora_object_load($pid);
  if (!$fedora_object) {
    return ("Fedora Object isn't in the repo!");
  }
  $datastream = $fedora_object[$dsid];
  if (!$datastream) {
    return ("Datastream isn't in the repo!");
  }



  return ($datastream->content);
}



/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function islandora_relationship_editor_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.

  if ($delta == 'rel_objects') {
    // Have Drupal save the string to the database.
    variable_set('islandora_relationship_editor_ontology', $edit['islandora_relationship_editor_ontology']);
  }
  return;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function islandora_relationship_editor_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
 //**//    case 'example_configurable_text':
 //**//      // The subject is displayed at the top of the block. Note that it
 //**//      // should be passed through t() for translation. The title configured
 //**//      // for the block using Drupal UI supercedes this one.
 //**//      $block['subject'] = t('Title of first block (example_configurable_text)');
 //**//      // The content of the block is typically generated by calling a custom
 //**//      // function.
 //**//      $block['content'] = islandora_relationship_editor_contents($delta);
 //**//      break;
    case 'rel_objects':
      $block['subject'] = t('Title of block (rel_objects)');
//      $block['content'] = islandora_relationship_editor_contents($delta);
      $block['content'] = theme('islandora_relationship_editor_block');
      break;
 //**//    case 'example_uppercase':
 //**//      $block['subject'] = t("uppercase this please");
 //**//      $block['content'] = t("This block's title will be changed to uppercase. Any other block with 'uppercase' in the subject or title will also be altered. If you change this block's title through the UI to omit the word 'uppercase', it will still be altered to uppercase as the subject key has not been changed.");
 //**//      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function islandora_relationship_editor_contents($which_block) {
  switch ($which_block) {
    case 'rel_objects':
      // Modules would typically perform some database queries to fetch the
      // content for their blocks. Here, we'll just use the variable set in the
      // block configuration or, if none has set, a default value.
      // Block content can be returned in two formats: renderable arrays
      // (as here) are preferred though a simple string will work as well.
      // Block content created through the UI defaults to a string.

//	$islandora_object = array('islandora_object' => NULL);
//  $repository = $islandora_object->repository;
//  $rels = $islandora_object->relationships->get();
//  $output = theme('islandora_relationship_editor_related_objects', array('islandora_object' => $object));
//  return array('Related objects' => $output);
	return "TEST";	
//      return array('#markup' => variable_get('islandora_relationship_editor_string',  t('A default value. This block was created at %time', array('%time' => date('c')))));


 //**//    case 'example_empty':
      // It is possible that a block not have any content, since it is
      // probably dynamically constructed. In this case, Drupal will not display
      // the block at all. This block will not be displayed.
 //**//      return;
  }
}

/*
 * The following hooks can be used to alter blocks
 * provided by your own or other modules.
 */

/**
 * Implements hook_block_list_alter().
 *
 * This hook allows you to add, remove or modify blocks in the block list. The
 * block list contains the block definitions. This example requires
 * search module and the search block enabled
 * to see how this hook implementation works.
 *
 * You may also be interested in hook_block_info_alter(), which allows changes
 * to the behavior of blocks.
 */
function islandora_relationship_editor_block_list_alter(&$blocks) {
  // We are going to make the search block sticky on bottom of regions. For
  // this example, we will modify the block list and append the search block at
  // the end of the list, so even if the administrator configures the block to
  // be on the top of the region, it will demote to bottom again.
//**//  foreach ($blocks as $bid => $block) {
//**//    if (($block->module == 'search') && ($block->delta == 'form')) {
//**//      // Remove the block from the list and append to the end.
//**//      unset($blocks[$bid]);
//**//      $blocks[$bid] = $block;
//**//      break;
//**//    }
//**//  }
}

/**
 * Implements hook_block_view_alter().
 *
 * This hook allows you to modify the output of any block in the system.
 *
 * In addition, instead of hook_block_view_alter(), which is called for all
 * blocks, you can also use hook_block_view_MODULE_DELTA_alter() to alter a
 * specific block. To change only our block using
 * hook_block_view_MODULE_DELTA_alter, we would use the function:
 * block_example_block_view_block_example_example_configurable_text_alter()
 *
 * We are going to uppercase the subject (the title of the block as shown to the
 * user) of any block if the string "uppercase" appears in the block title or
 * subject. Default block titles are set programmatically in the subject key;
 * titles created through the UI are saved in the title key. This module creates
 * an example block to demonstrate this effect (default title set
 * programmatically as subject).  You can also demonstrate the effect of this
 * hook by creating a new block whose title has the string 'uppercase' in it
 * (set as title through the UI).
 */
function islandora_relationship_editor_block_view_alter(&$data, $block) {
  // We'll search for the string 'uppercase'.
//**//  if ((!empty($block->title) && stristr($block->title, 'uppercase')) || (!empty($data['subject']) && stristr($data['subject'], 'uppercase'))) {
//**//    // This will uppercase the default title.
//**//    $data['subject'] = isset($data['subject']) ? drupal_strtoupper($data['subject']) : '';
//**//    // This will uppercase a title set in the UI.
//**//    $block->title = isset($block->title) ? drupal_strtoupper($block->title) : '';
//**//  }
}
/**
 * @} End of "defgroup block_example".
 */


